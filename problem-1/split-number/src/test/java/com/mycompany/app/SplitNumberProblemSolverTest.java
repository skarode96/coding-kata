package com.mycompany.app;

import javafx.util.Pair;
import org.junit.Assert;
import org.junit.Test;

import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;


public class SplitNumberProblemSolverTest
{
    @Test(expected = IllegalArgumentException.class)
    public void shouldThrowExceptionForIndexOutOfBounds() {
        String input = "34556";
        final int index = -1;
        SplitNumberProblemSolver.split(input, index);
    }

    @Test
    public void shouldSplitInputStringFromIndexAsOne() {
        String input = "34556";
        final int index = 1;
        final Pair<String, String> actualPair = SplitNumberProblemSolver.split(input, index);
        Pair<String, String> expectedPair = new Pair<String, String>("3", "4556");
        Assert.assertEquals(expectedPair, actualPair);
    }

    @Test
    public void shouldSplitInputStringFromMiddleIndexAsThree() {
        String input = "34556";
        final int index = 3;
        final Pair<String, String> actualPair = SplitNumberProblemSolver.split(input, index);
        Pair<String, String> expectedPair = new Pair<String, String>("345", "56");
        Assert.assertEquals(expectedPair, actualPair);
    }

    @Test
    public void shouldSplitInputStringFromLastIndex() {
        String input = "345564234";
        final int index = input.length();
        final Pair<String, String> actualPair = SplitNumberProblemSolver.split(input, index);
        Pair<String, String> expectedPair = new Pair<String, String>("345564234", "");
        Assert.assertEquals(expectedPair, actualPair);
    }

    @Test
    public void shouldSplitInputStringFromInitialIndex() {
        String input = "345564234";
        final int index = 0;
        final Pair<String, String> actualPair = SplitNumberProblemSolver.split(input, index);
        Pair<String, String> expectedPair = new Pair<String, String>("", "345564234");
        Assert.assertEquals(expectedPair, actualPair);
    }

    @Test
    public void shouldAddPairOfString() {
        final Pair<String, String> pair = new Pair<String, String>("12", "12");
        final String actualSum = SplitNumberProblemSolver.addPair(pair);
        final String expectedSum = "24";
        Assert.assertEquals(expectedSum, actualSum);
    }

    @Test
    public void shouldValidatePairWhereSecondParamStartsWithZero() {
        final Pair<String, String> pair = new Pair<String, String>("12", "012");
        final boolean isPairValid = SplitNumberProblemSolver.isPairValid(pair);
        Assert.assertFalse(isPairValid);
    }

    @Test
    public void shouldValidatePairWhereFirstParamStartsWithZero() {
        final Pair<String, String> pair = new Pair<String, String>("012", "12");
        final boolean isPairValid = SplitNumberProblemSolver.isPairValid(pair);
        Assert.assertFalse(isPairValid);
    }

    @Test
    public void shouldValidatePairAsTrueIfNoneOfThemStartsWithZero() {
        final Pair<String, String> pair = new Pair<String, String>("12", "12");
        final boolean isPairValid = SplitNumberProblemSolver.isPairValid(pair);
        Assert.assertTrue(isPairValid);
    }

    @Test
    public void shouldSolveSplitNumberProblem() {
        final List<String> inputArray = Arrays.asList("101", "1234567","2340","");
        final List<String> expectedOutputArray = Arrays.asList("11", "1801", "63","812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015812515281302755192591732409763028089070834155049899266252079336709344556413709612424386971202051031158305526059775493768895133666766277685724150894462291181599731334956622158354516357121135521394675648894653763479916798822023629633987549902963100294015");
        final List<String> actualOutputArray = inputArray.stream().map(SplitNumberProblemSolver::solve).collect(Collectors.toList());
        Assert.assertEquals(expectedOutputArray, actualOutputArray);
    }

    @Test
    public void shouldAddPair() {
        final Pair<String, String> pair = new Pair<String, String>("1234","567");
        final String actualSum = SplitNumberProblemSolver.addPair(pair);
        final String expectedSum = "1801";
        Assert.assertEquals(expectedSum, actualSum);

    }

}
